import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder

# Load the dataset
df = pd.read_csv("interncar.csv")

# Create a new column for caar age
df['Car_Age'] = 2025 - df['Year']

# Drop unnecessary columns
df.drop(['Car_Name', 'Year'], axis=1, inplace=True)

# Create separate LabelEncoders for each categorical column
fuel_encoder = LabelEncoder()
sell_encoder = LabelEncoder()
trans_encoder = LabelEncoder()

df['Fuel_Type'] = fuel_encoder.fit_transform(df['Fuel_Type'])
df['Selling_type'] = sell_encoder.fit_transform(df['Selling_type'])
df['Transmission'] = trans_encoder.fit_transform(df['Transmission'])

# Define features (X) and target (y)
X = df.drop('Selling_Price', axis=1)
y = df['Selling_Price']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestRegressor()
model.fit(X_train, y_train)

# --- Predicting Price Based on User Input ---
print("\n--- Enter Car Details ---")

present_price = float(input("Present Price (in Lakhs): "))
kms_driven = int(input("Kilometers Driven: "))
fuel_type = input("Fuel Type (Petrol/Diesel/CNG): ").capitalize()
selling_type = input("Selling Type (Dealer/Individual): ").capitalize()
transmission = input("Transmission Type (Manual/Automatic): ").capitalize()
owner = int(input("Number of previous owners (0/1/3): "))
car_age = int(input("Car Age (in years): "))

# Encode input using the same encoders
try:
    fuel_encoded = fuel_encoder.transform([fuel_type])[0]
    selling_encoded = sell_encoder.transform([selling_type])[0]
    trans_encoded = trans_encoder.transform([transmission])[0]
except ValueError:
    print("\n⚠️ Invalid input detected. Please check spelling and try again.")
    print("Fuel types allowed:", list(fuel_encoder.classes_))
    print("Selling types allowed:", list(sell_encoder.classes_))
    print("Transmission types allowed:", list(trans_encoder.classes_))
    exit()

# Create input array
input_features = [[present_price, kms_driven, fuel_encoded, selling_encoded, trans_encoded, owner, car_age]]

# Predict the price
predicted_price = model.predict(input_features)[0]

print(f"\n✅ Predicted Selling Price: ₹ {round(predicted_price, 2)} Lakhs")
